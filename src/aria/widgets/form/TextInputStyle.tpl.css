/*
 * Copyright 2012 Amadeus s.a.s.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{CSSTemplate {
    $classpath : "aria.widgets.form.TextInputStyle",
    $extends : "aria.widgets.form.InputStyle"
}}
    {var skinnableClassName="TextInput"/}
    {var useFrame=true/}

    {macro main()}
        .xWidget.xFullWidth .xFrameContent .x${skinnableClassName}Input,
        .xWidget.xFullWidth .xSimpleFrame .x${skinnableClassName}Input {
            width: 100% !important;
            box-sizing: border-box;
        }
        {call $InputStyle.main() /}
    {/macro}

    {macro writeSkinClass(info)}
        {call $InputStyle.writeSkinClass(info) /}
        {var skinClassName=info.skinClassName/}
        {var skinObj=info.skinClass/}

        input.x${skinnableClassName}_${skinClassName}_input, textarea.x${skinnableClassName}_${skinClassName}_input {
            padding: ${skinObj.innerPaddingTop}px ${skinObj.innerPaddingRight}px ${skinObj.innerPaddingBottom}px ${skinObj.innerPaddingLeft}px;
            position:relative;
            margin:0;
            {if !skinObj.simpleHTML}
                background-color:transparent;
                border-width:0px;
                vertical-align:top;
            {/if}
        }

        {var helpText = skinObj.helpText || {} /}
        input.x${skinnableClassName}_${skinClassName}_helpText, textarea.x${skinnableClassName}_${skinClassName}_helpText {
            {if helpText.innerPaddingTop != null}
                padding-top: ${helpText.innerPaddingTop}px;
            {/if}
            {if helpText.innerPaddingRight != null}
                padding-right: ${helpText.innerPaddingRight}px;
            {/if}
            {if helpText.innerPaddingBottom != null}
                padding-bottom: ${helpText.innerPaddingBottom}px;
            {/if}
            {if helpText.innerPaddingLeft != null}
                padding-left: ${helpText.innerPaddingLeft}px;
            {/if}
            {if helpText.italics}
                font-style: italic;
            {/if}
            {if helpText.font}
                {call generateFontStyle(helpText.font)/}
            {/if}
        }
    {/macro}

    {macro writeState(info)}
        .${cssPrefix(info)}label {
            font-weight: ${info.skinClass.label.fontWeight}
        }
        {call $InputStyle.writeState(info) /}
    {/macro}

{/CSSTemplate}

/*
 * Copyright 2012 Amadeus s.a.s.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{CSSTemplate {
    $classpath : "aria.widgets.GlobalStyle",
    $dependencies : ["aria.widgets.environment.WidgetSettings","aria.widgets.AriaSkinInterface"],
    $extends: "aria.widgets.WidgetStyle",
    $csslibs : {
        text : "aria.widgets.TextStyle"
    }
}}

{macro main()}
    {var general = aria.widgets.AriaSkinInterface.getGeneral()/}
    {var widgetGeneral = aria.widgets.AriaSkinInterface.getWidgetGeneral()/}
/* Note: all private classes start with 'x' - these classes must not be used in application pages as they can change when new features are implemented */

.xLDI {
    {call background(general.loadingOverlay.backgroundColor, general.loadingOverlay.spriteURL,"no-repeat center center")/}
    {call opacity(general.loadingOverlay.opacity)/}
}

.xOverlay {
    background-color: ${general.overlay.backgroundColor};
    {call opacity(general.overlay.opacity)/}
    border: ${general.overlay.border};

    {call writeBorderRadius(general.overlay)/}
}

/*AT Widget wrapper DOMElm */
{var widgetSettings = aria.widgets.environment.WidgetSettings.getWidgetSettings() /}
.xWidget {
    position: relative;
    display: inline-block;
    {if widgetSettings.middleAlignment}vertical-align: middle;{/if}
}

{if widgetGeneral && widgetGeneral.font}
.xWidget textarea,
.xWidget select,
.xWidget input,
.xWidget button,
.xWidget table {
    {call text.writeFontStyleInner(widgetGeneral.font) /}
}
{/if}

{if widgetGeneral && widgetGeneral.anchor && widgetGeneral.anchor.states}
    {call text.writeAnchorsStyle(widgetGeneral.anchor.states, ".xWidget") /}
{/if}

.xWidget.xBlock, .xBlock, .xWidget.xFullWidth {
    display: block;
}

/* Mask for modal dialogs */
.xDialogMask {
    /* width and height are required for IE6 to work correctly */
    width:100%;
    height:100%;
    background-color: ${general.dialogMask.backgroundColor};
    {call opacity(general.dialogMask.opacity || 40) /}
}

.xFrameContent {
    display: inline-block;
    position:relative;
    padding: 0 !important;
    border: 0 !important;
}

.xFixedHeightFrame_w {
    display: inline-block;
    position: relative;
    overflow: hidden;
    vertical-align: {if widgetSettings.middleAlignment}middle{else/}top{/if};
}
.xFixedHeightFrame_bme {
    display: inline-block;
    vertical-align: {if widgetSettings.middleAlignment}middle{else/}top{/if};
}
.xSimpleFrame {
    display: inline-block;
    position: relative;
}

{if aria.core.Browser.isIE7 }
.xFixedHeightFrame_w {
    vertical-align:top;
}

.xFixedHeightFrame_bme {
    vertical-align:top;
}
{/if}

{if aria.core.Browser.isIE10 || aria.core.Browser.isModernIE}
.xTextInputInput::-ms-clear {
    display: none;
}
.xTextInputInput::-ms-reveal {
    display: none;
}
{/if}

{if aria.core.Browser.isSafari || aria.core.Browser.isChrome || aria.core.Browser.isOpera}
*:focus {
    outline-width: 0;
}
{/if}

.xWidget.xFullWidth .xSimpleFrame {
    display: block;
    width: auto !important;
}
.xWidget.xFullWidth .xFixedHeightFrame_w {
    display: block;
}
.xWidget.xFullWidth .xFixedHeightFrame_w .xFrameContent {
    width: 100% !important;
}

.xFloatLabelRight {
    float: right;
}
.xFloatLabelLeft {
    float: left;
}

.xSROnly {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0,0,0,0);
    border: 0;
    outline: none;
}

{/macro}

{/CSSTemplate}
